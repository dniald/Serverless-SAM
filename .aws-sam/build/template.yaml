AWSTemplateFormatVersion: 2010-09-09
Description: Serverless-SAM
Transform:
- AWS::Serverless-2016-10-31
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
Resources:
  GithubDanialRole:
    Type: AWS::Serverless::Application
    Properties:
      Location: GithubDanialRole\template.yaml
    Metadata:
      SamResourceId: GithubDanialRole
  Gardenia:
    Type: AWS::Serverless::Application
    Properties:
      Location: Gardenia\template.yaml
    Metadata:
      SamResourceId: Gardenia
  CodePipelineArtifactStoreBucket:
    Type: AWS::Serverless::Application
    Properties:
      Location: CodePipelineArtifactStoreBucket\template.yaml
    Metadata:
      SamResourceId: CodePipelineArtifactStoreBucket
  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::Serverless::Application
    Properties:
      Location: CodePipelineArtifactStoreBucketPolicy\template.yaml
    Metadata:
      SamResourceId: CodePipelineArtifactStoreBucketPolicy
  AmazonCloudWatchEventRole:
    Type: AWS::Serverless::Application
    Properties:
      Location: AmazonCloudWatchEventRole\template.yaml
    Metadata:
      SamResourceId: AmazonCloudWatchEventRole
  AmazonCloudWatchEventRule:
    Type: AWS::Serverless::Application
    Properties:
      Location: AmazonCloudWatchEventRule\template.yaml
    Metadata:
      SamResourceId: AmazonCloudWatchEventRule
  AppPipeline:
    Type: AWS::Serverless::Application
    Properties:
      Location: AppPipeline\template.yaml
    Metadata:
      SamResourceId: AppPipeline
  CodePipelineServiceRole:
    Type: AWS::Serverless::Application
    Properties:
      Location: CodePipelineServiceRole\template.yaml
    Metadata:
      SamResourceId: CodePipelineServiceRole
  MAE:
    Type: AWS::Serverless::Application
    Properties:
      Location: MAE\template.yaml
    Metadata:
      SamResourceId: MAE
  GetDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetDataFunction
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 128
      Timeout: 30
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: OrdersTable
      Environment:
        Variables:
          SAMPLE_TABLE:
            Ref: OrdersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
    Metadata:
      SamResourceId: GetDataFunction
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DanialAuthorsTable_prod
      AttributeDefinitions:
      - AttributeName: AuthorName
        AttributeType: S
      - AttributeName: BookTitle
        AttributeType: S
      KeySchema:
      - AttributeName: AuthorName
        KeyType: HASH
      - AttributeName: BookTitle
        KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: true
      BillingMode: PAY_PER_REQUEST
    DependsOn:
    - DynamoDBQueryPolicy
  DynamoDBQueryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBQueryPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: dynamodb:Query
          Resource: '*'
      Roles:
      - Ref: OrdersTableQueryRole
  OrdersTableQueryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - dynamodb.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
